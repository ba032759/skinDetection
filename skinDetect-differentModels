# Required moduls
import cv
import cv2
import numpy
from matplotlib import pyplot as plt
from math import sqrt


def calculateMean(channel_in):
    channel = channel_in.copy()
    height, width = channel.shape
    counter = 0
    total = 0
    for i in range(0, height):
        for j in range(0, width):
            if channel[i, j] > 0:
                total += channel[i, j]
                counter += 1
    return total / counter


def calculateSD(channel_in, mean):
    channel = channel_in.copy()
    height, width = channel.shape
    counter = 0
    variance = 0
    for i in range(0, height):
        for j in range(0, width):
            if channel[i, j] > 0:
                variance += (float(channel[i, j]) - mean) ** 2
                counter += 1
    variance = variance / counter
    return sqrt(variance)


def removeNonSkinBlue(image_in, lowerThreshold, upperThreshold):
    image = image_in.copy()
    blue = image[:, :, 0]
    green = image[:, :, 1]
    red = image[:, :, 2]

    height, width, depth = image.shape
    for i in range(0, height):
        for j in range(0, width):
            if blue[i, j] < lowerThreshold or blue[i, j] > upperThreshold:
                blue[i, j] = 0
                green[i, j] = 0
                red[i, j] = 0
    return image


def removeExtremeValues(channel_in, lowerThreshold, upperThreshold):
    channel = channel_in.copy()
    height, width = channel.shape
    for i in range(0, height):
        for j in range(0, width):
            if channel[i, j] < lowerThreshold or channel[i, j] > upperThreshold:
                channel[i, j] = 0
    return channel


# base means the image with the zero values to remove from the image
def removeZeroValues(base, image_in):
    height, width = base.shape
    image = image_in.copy()
    for i in range(0, height):
        for j in range(0, width):
            if base[i, j] == 0:
                image[i, j, 0] = 0
                image[i, j, 1] = 0
                image[i, j, 2] = 0
    return image


# normalize R and G and keep R
def convertTo_rgR(image):
    b = image[:,:,0]
    g = image[:,:,1]
    r = image[:,:,2]
    c = b+g+r
    image[:,:,0] = r/c
    image[:,:,1] = g/c
    return image

def faceDetection(img, gray):
    face_cascade = cv2.CascadeClassifier('haarcascade/haarcascade_frontalface_default.xml')
    # eye_cascade = cv2.CascadeClassifier('haarcascade/haarcascade_eye.xml')

    # (image, scale_factor=1.3, min_neighbors=5, flags=0, min_size=(100, 100))
    faces = face_cascade.detectMultiScale(gray, 1.3, 5, 0, (100, 100))
    for (x, y, w, h) in faces:
        roi = img[y:y + h, x:x + w]
        # get a smaller region within the roi
        y_temp = int(y * 1.2)
        x_temp = int(x * 1.2)
        h_temp = int(h / 1.2)
        w_temp = int(w / 1.2)
        roi_inner_gray = gray[y_temp:y + h_temp, x_temp:x + w_temp]
        roi_inner = img[y_temp:y + h_temp, x_temp:x + w_temp]
        return roi_inner_gray, roi_inner
        '''
        eyes = eye_cascade.detectMultiScale(roi_gray)
        for (ex,ey,ew,eh) in eyes:
            cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
        10 12 10 12
        10 8 10 8
        '''
def calculateUpperAndLowerBounds(image):
    a = image[:,:,0]
    b = image[:,:,1]
    c = image[:,:,2]

    a_mean = calculateMean(a)
    a_sd = calculateSD(a, a_mean)
    b_mean = calculateMean(b)
    b_sd = calculateSD(b, b_mean)
    c_mean = calculateMean(c)
    c_sd = calculateSD(c, c_mean)
    lowerBound = cv.Scalar(a_mean - a_sd*2, b_mean - b_sd*2, c_mean - c_sd*2)
    upperBound = cv.Scalar(a_mean + a_sd*2, b_mean + b_sd*2, c_mean + c_sd*2)
    # 1 1 1
    # 2 1 1
    return lowerBound, upperBound

def calculateUpperAndLowerBoundsSingleChannel(channel):
    a_mean = calculateMean(channel)
    a_sd = calculateSD(channel, a_mean)
    lowerBound = a_mean - a_sd*2
    upperBound = a_mean + a_sd*2
    return lowerBound, upperBound

def removeFromGray(image, inner_gray):
    img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    mean = calculateMean(inner_gray)
    sd = calculateSD(inner_gray, mean)
    lowerBound = mean - sd*2
    upperBound = mean + sd*2
    mask = cv2.inRange(img, lowerBound, upperBound)
    return cv2.bitwise_and(image, image, mask=mask)


#img = cv2.imread('test.jpg')
#img = cv2.imread('test2.jpg')
#img = cv2.imread('kate-upton.jpg')
img = cv2.imread('scissors.jpg')

gray_conv = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray, color = faceDetection(img, gray_conv)
img = removeFromGray(img, gray)

lower_gray, upper_gray = calculateUpperAndLowerBoundsSingleChannel(gray)
mask = cv2.inRange(img, cv.Scalar(lower_gray, 0, 0), cv.Scalar(upper_gray, 255, 255))
result = cv2.bitwise_and(img, img, mask=mask)
cv2.imshow('gray', result)

#img_tmp = cv2.cvtColor(result, cv2.COLOR_BGR2YUV)
#color = cv2.cvtColor(color, cv2.COLOR_BGR2YUV)

#img_tmp = cv2.cvtColor(result, cv2.COLOR_BGR2HSV)
#color = cv2.cvtColor(color, cv2.COLOR_BGR2HSV)

#img_tmp = cv2.cvtColor(result, cv2.COLOR_BGR2YCR_CB)
#color = cv2.cvtColor(color, cv2.COLOR_BGR2YCR_CB)

#img_tmp = cv2.cvtColor(result, cv2.COLOR_BGR2LUV)
#color = cv2.cvtColor(color, cv2.COLOR_BGR2LUV)

img_tmp = convertTo_rgR(result)
color = convertTo_rgR(color)

lower, upper = calculateUpperAndLowerBounds(color)
mask = cv2.inRange(img_tmp, lower, upper)
end = cv2.bitwise_and(img, img, mask=mask)
cv2.imshow('test', end)
cv2.waitKey(0)
cv2.destroyAllWindows()
